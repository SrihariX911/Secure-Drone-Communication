import sys
import os
from ast import literal_eval

# Uncomment and modify the following line if importing Ntru from another directory
# sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
# from ntru.ntru import *

# Parameters for NTRU encryption
print("Enter the value of degree:")
N = 7
print("Enter the value of small prime number:")
p = 29
print("Enter the value of large prime number:")
q = 491531

print(f"Degree = {N}, Small Prime Number = {p}, Large Prime Number = {q}")

# Bob generates keys
Bob = Ntru(N, p, q)
f = [1, 1, -1, 0, -1, 1]
g = [-1, 0, 1, 1, 0, 0, -1]
d = 2

print("Bob's private polynomials:")
print(f"f(x) = {f}")
print(f"g(x) = {g}")
print(f"d    = {d}")

# Generate public key
Bob.genPublicKey(f, g, d)
pub_key = Bob.getPublicKey()
print("Public Key Generated by Bob:", pub_key)
print("-------------------------------------------------")

# Alice encrypts a message
Alice = Ntru(N, p, q)
Alice.setPublicKey(pub_key)

# Get dynamic input from the user
user_input = input("Enter a message (string or list of numbers): ")

try:
    # Process input (convert string to ASCII or validate number list)
    processed_msg = stringToAscii(literal_eval(user_input))
except (ValueError, SyntaxError):
    processed_msg = stringToAscii(user_input)

print("Alice's Original Message   :", processed_msg)

# Alice defines a random polynomial for encryption
ranPol = [-1, -1, 1, 1]
print("Alice's Random Polynomial  :", ranPol)

# Encrypt the message
encrypt_msg = Alice.encrypt(processed_msg, ranPol)
print("Encrypted Message          :", encrypt_msg)
print("-------------------------------------------------")

# Bob decrypts the message
print("Bob decrypts the message sent to him:")
decrypted_msg = Bob.decrypt(encrypt_msg)
print("Decrypted Message          :", decrypted_msg)
